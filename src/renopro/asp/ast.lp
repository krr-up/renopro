% Rules to tag AST facts.

ast(string(X0,X1)) :- string(X0,X1).
ast(number(X0,X1)) :- number(X0,X1).
ast(variable(X0,X1)) :- variable(X0,X1).
ast(unary_operation(X0,X1,X2)) :- unary_operation(X0,X1,X2).
ast(binary_operation(X0,X1,X2,X3)) :- binary_operation(X0,X1,X2,X3).
ast(interval(X0,X1,X2)) :- interval(X0,X1,X2).
ast(terms(X0,X1,X2)) :- terms(X0,X1,X2).
ast(function(X0,X1,X2)) :- function(X0,X1,X2).
ast(external_function(X0,X1,X2)) :- external_function(X0,X1,X2).
ast(pool(X0,X1)) :- pool(X0,X1).
ast(theory_terms(X0,X1,X2)) :- theory_terms(X0,X1,X2).
ast(theory_sequence(X0,X1,X2)) :- theory_sequence(X0,X1,X2).
ast(theory_function(X0,X1,X2)) :- theory_function(X0,X1,X2).
ast(theory_operators(X0,X1,X2)) :- theory_operators(X0,X1,X2).
ast(theory_unparsed_term_elements(X0,X1,X2,X3)) :- theory_unparsed_term_elements(X0,X1,X2,X3).
ast(theory_unparsed_term(X0,X1)) :- theory_unparsed_term(X0,X1).
ast(guard(X0,X1,X2)) :- guard(X0,X1,X2).
ast(guards(X0,X1,X2)) :- guards(X0,X1,X2).
ast(comparison(X0,X1,X2)) :- comparison(X0,X1,X2).
ast(boolean_constant(X0,X1)) :- boolean_constant(X0,X1).
ast(symbolic_atom(X0,X1)) :- symbolic_atom(X0,X1).
ast(literal(X0,X1,X2)) :- literal(X0,X1,X2).
ast(literals(X0,X1,X2)) :- literals(X0,X1,X2).
ast(conditional_literal(X0,X1,X2)) :- conditional_literal(X0,X1,X2).
ast(aggregate_elements(X0,X1,X2)) :- aggregate_elements(X0,X1,X2).
ast(aggregate(X0,X1,X2,X3)) :- aggregate(X0,X1,X2,X3).
ast(theory_atom_elements(X0,X1,X2,X3)) :- theory_atom_elements(X0,X1,X2,X3).
ast(theory_guard(X0,X1,X2)) :- theory_guard(X0,X1,X2).
ast(theory_atom(X0,X1,X2,X3)) :- theory_atom(X0,X1,X2,X3).
ast(body_aggregate_elements(X0,X1,X2,X3)) :- body_aggregate_elements(X0,X1,X2,X3).
ast(body_aggregate(X0,X1,X2,X3,X4)) :- body_aggregate(X0,X1,X2,X3,X4).
ast(body_literal(X0,X1,X2)) :- body_literal(X0,X1,X2).
ast(body_literals(X0,X1,X2)) :- body_literals(X0,X1,X2).
ast(head_aggregate_elements(X0,X1,X2,X3)) :- head_aggregate_elements(X0,X1,X2,X3).
ast(head_aggregate(X0,X1,X2,X3,X4)) :- head_aggregate(X0,X1,X2,X3,X4).
ast(conditional_literals(X0,X1,X2)) :- conditional_literals(X0,X1,X2).
ast(disjunction(X0,X1)) :- disjunction(X0,X1).
ast(rule(X0,X1,X2)) :- rule(X0,X1,X2).
ast(definition(X0,X1,X2,X3)) :- definition(X0,X1,X2,X3).
ast(show_signature(X0,X1,X2,X3)) :- show_signature(X0,X1,X2,X3).
ast(defined(X0,X1,X2,X3)) :- defined(X0,X1,X2,X3).
ast(show_term(X0,X1,X2)) :- show_term(X0,X1,X2).
ast(minimize(X0,X1,X2,X3,X4)) :- minimize(X0,X1,X2,X3,X4).
ast(script(X0,X1,X2)) :- script(X0,X1,X2).
ast(statements(X0,X1,X2)) :- statements(X0,X1,X2).
ast(constants(X0,X1,X2)) :- constants(X0,X1,X2).
ast(program(X0,X1,X2,X3)) :- program(X0,X1,X2,X3).
ast(external(X0,X1,X2,X3)) :- external(X0,X1,X2,X3).
ast(edge(X0,X1,X2,X3)) :- edge(X0,X1,X2,X3).
ast(heuristic(X0,X1,X2,X3,X4,X5)) :- heuristic(X0,X1,X2,X3,X4,X5).
ast(project_atom(X0,X1,X2)) :- project_atom(X0,X1,X2).
ast(project_signature(X0,X1,X2,X3)) :- project_signature(X0,X1,X2,X3).
ast(theory_operator_definitions(X0,X1,X2,X3,X4)) :- theory_operator_definitions(X0,X1,X2,X3,X4).
ast(theory_term_definitions(X0,X1,X2,X3)) :- theory_term_definitions(X0,X1,X2,X3).
ast(theory_guard_definition(X0,X1,X2)) :- theory_guard_definition(X0,X1,X2).
ast(theory_atom_definitions(X0,X1,X2,X3,X4,X5,X6)) :- theory_atom_definitions(X0,X1,X2,X3,X4,X5,X6).
ast(theory_definition(X0,X1,X2,X3)) :- theory_definition(X0,X1,X2,X3).
ast(location(X0,X1,X2)) :- location(X0,X1,X2).
