% tag ast facts.
ast(string(Id,Val)) :- string(Id,Val).
ast(number(Id,Val)) :- number(Id,Val).
ast(variable(Id,Name)) :- variable(Id,Name).
ast(unary_operation(Id,Operator,Argument)) :- unary_operation(Id,Operator,Argument).
ast(binary_operation(Id,Operator,Left,Right)) :- binary_operation(Id,Operator,Left,Right).
ast(interval(Id,Left,Right)) :- interval(Id,Left,Right).
ast(terms(Id,Pos,Element)) :- terms(Id,Pos,Element).
ast(function(Id,Name,Args)) :- function(Id,Name,Args).
ast(external_function(Id,Name,Args)) :- external_function(Id,Name,Args).
ast(pool(Id,Args)) :- pool(Id,Args).
ast(theory_terms(Id,Pos,Element)) :- theory_terms(Id,Pos,Element).
ast(theory_sequence(Id,SeqType,Terms)) :- theory_sequence(Id,SeqType,Terms).
ast(theory_function(Id,Name,Args)) :- theory_function(Id,Name,Args).
ast(theory_operators(Id,Pos,Operator)) :- theory_operators(Id,Pos,Operator).
ast(theory_unparsed_term_elements(Id,Pos,Operators,Term)) :- theory_unparsed_term_elements(Id,Pos,Operators,Term).
ast(theory_unparsed_term(Id,Elements)) :- theory_unparsed_term(Id,Elements).
ast(guard(Id,Op,Term)) :- guard(Id,Op,Term).
ast(guards(Id,Pos,Element))  :- guards(Id,Pos,Element).
ast(comparison(Id,Guards)) :- comparison(Id,Guards).
ast(boolean_constant(Id,Bool)) :- boolean_constant(Id,Bool).
ast(symbolic_atom(Id,Symbol)) :- symbolic_atom(Id,Symbol).
ast(literal(Id,Sign,Atom)) :- literal(Id,Sign,Atom).
ast(literals(Id,Pos,Element)) :- literals(Id,Pos,Element).
ast(conditional_literal(Id,Literal,Condition)) :- conditional_literal(Id,Literal,Condition).
ast(aggregate_elements(Id,Pos,Element)) :- aggregate_elements(Id,Pos,Element).
ast(aggregate(Id,LGuard,Elements,RGuard)) :- aggregate(Id,LGuard,Elements,RGuard).
ast(theory_atom_elements(Id,Pos,TheoryTerms,Condition)) :- theory_atom_elements(Id,Pos,TheoryTerms,Condition).
ast(theory_guard(Id,OpName,Term)) :- theory_guard(Id,OpName,Term).
ast(theory_atom(Id,Atom,Elements,TheoryGuard)) :- theory_atom(Id,Atom,Elements,TheoryGuard).
ast(body_aggregate_elements(Id,Pos,Terms,Condition)) :- body_aggregate_elements(Id,Pos,Terms,Condition).
ast(body_aggregate(Id,LGuard,Elements,RGuard)) :- body_aggregate(Id,LGuard,Elements,RGuard).
ast(body_literal(Id,Sign,Atom)) :- body_literal(Id,Sign,Atom).
ast(body_literals(Id,Pos,Element)) :- body_literals(Id,Pos,Element).
ast(head_aggregate_elements(Id,Pos,Terms,Condition)) :- head_aggregate_elements(Id,Pos,Terms,Condition).
ast(head_aggregate(Id,LGuard,Elements,RGuard)) :- head_aggregate(Id,LGuard,Elements,RGuard).
ast(conditional_literals(Id,Pos,CondLit)) :- conditional_literals(Id,Pos,CondLit).
ast(disjunction(Id,Pos,Element)) :- disjunction(Id,Pos,Element).
ast(rule(Id,Head,Body)) :- rule(Id,Head,Body).
ast(definition(Id,Name,Value,Default)) :- definition(Id,Name,Value,Default).
ast(show_signature(Id,Name,Arity,Positive)) :- show_signature(Id,Name,Arity,Positive).
ast(defined(Id,Name,Arity,Positive)) :- defined(Id,Name,Arity,Positive).
ast(minimize(Id,Weight,Priority,Terms,Body)) :- minimize(Id,Weight,Priority,Terms,Body).
ast(script(Id,Name,Code)) :- script(Id,Name,Code).
ast(statements(Id,Pos,Element)) :- statements(Id,Pos,Element).
ast(constants(Id,Pos,Element)) :- constants(Id,Pos,Element).
ast(program(Id,Name,Params,Statements)) :- program(Id,Name,Params,Statements).
ast(external(Atom,Body,Type)) :- external(Atom,Body,Type).
ast(edge(Id,U,V,Body)) :-edge(Id,U,V,Body).
ast(heuristic(Id,Atom,Body,Bias,Priority,Modifier)) :- heuristic(Id,Atom,Body,Bias,Priority,Modifier).
ast(project_atom(Id,Atom,Body)) :- project_atom(Id,Atom,Body).
ast(project_signature(Id,Name,Arity,Positive)) :- project_signature(Id,Name,Arity,Positive).
ast(theory_operator_definitions(Id,Pos,Name,Priority,OpType)) :- theory_operator_definitions(Id,Pos,Name,Priority,OpType).
ast(theory_term_definitions(Id,Pos,Name,Operators)) :- theory_term_definitions(Id,Pos,Name,Operators).
ast(theory_guard_definition(Id,Operators,Term)) :- theory_guard_definition(Id,Operators,Term).
ast(theory_atom_definitions(Id,Pos,AtomType,Name,Arity,Term,Guard)) :- theory_atom_definitions(Id,Pos,AtomType,Name,Arity,Term,Guard).
ast(theory_definition(Id,Name,Terms,Atoms)) :- theory_definition(Id,Name,Terms,Atoms).

