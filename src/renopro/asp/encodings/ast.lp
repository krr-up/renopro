% tag ast facts.
ast(string(Id,Val)) :- string(Id,Val).
ast(number(Id,Val)) :- number(Id,Val).
ast(variable(Id,Name)) :- variable(Id,Name).
ast(binary_operation(Id,Operator,Left,Right)) :- binary_operation(Id,Operator,Left,Right).
ast(interval(Id,Left,Right)) :- interval(Id,Left,Right).
ast(terms(Id,Pos,Element)) :- terms(Id,Pos,Element).
ast(function(Id,Name,Args)) :- function(Id,Name,Args).
ast(guard(Id,Op,Term)) :- guard(Id,Op,Term).
ast(guards(Id,Pos,Element))  :- guards(Id,Pos,Element).
ast(comparison(Id,Guards)) :- comparison(Id,Guards).
ast(boolean_constant(Id,Bool)) :- boolean_constant(Id,Bool).
ast(symbolic_atom(Id,Symbol)) :- symbolic_atom(Id,Symbol).
ast(literal(Id,Sign,Function)) :- literal(Id,Sign,Function).
ast(literals(Id,Pos,Element)) :- literals(Id,Pos,Element).
ast(conditional_literal(Id,Literal,Condition)) :- conditional_literal(Id,Literal,Condition).
ast(agg_elements(Id,Pos,Element)) :- agg_elements(Id,Pos,Element).
ast(aggregate(Id,LGuard,Elements,RGuard)) :- aggregate(Id,LGuard,Elements,RGuard).
ast(body_agg_elements(Id,Pos,Terms,Condition)) :- body_agg_elements(Id,Pos,Terms,Condition).
ast(body_aggregate(Id,LGuard,Elements,RGuard)) :- body_aggregate(Id,LGuard,Elements,RGuard).
ast(body_literals(Id,Pos,Element)) :- body_literals(Id,Pos,Element).
ast(head_agg_elements(Id,Pos,Terms,Condition)) :- head_agg_elements(Id,Pos,Terms,Condition).
ast(head_aggregate(Id,LGuard,Elements,RGuard)) :- head_aggregate(Id,LGuard,Elements,RGuard).
ast(disjunction(Id,Pos,Element)) :- disjunction(Id,Pos,Element).
ast(rule(Id,Head,Body)) :- rule(Id,Head,Body).
ast(statements(Id,Pos,Element)) :- statements(Id,Pos,Element).
ast(constants(Id,Pos,Element)) :- constants(Id,Pos,Element).
ast(program(Name,Params,Statements)) :- program(Name,Params,Statements).
ast(external(Atom,Body,Type)) :- external(Atom,Body,Type).
