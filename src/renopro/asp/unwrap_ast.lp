% Rules to unwrap tagged AST facts for next step of transformation.

string(X0,X1,T) :- ast(fact(string(X0,X1)),T).
number(X0,X1,T) :- ast(fact(number(X0,X1)),T).
variable(X0,X1,T) :- ast(fact(variable(X0,X1)),T).
unary_operation(X0,X1,X2,T) :- ast(fact(unary_operation(X0,X1,X2)),T).
binary_operation(X0,X1,X2,X3,T) :- ast(fact(binary_operation(X0,X1,X2,X3)),T).
interval(X0,X1,X2,T) :- ast(fact(interval(X0,X1,X2)),T).
terms(X0,X1,X2,T) :- ast(fact(terms(X0,X1,X2)),T).
function(X0,X1,X2,T) :- ast(fact(function(X0,X1,X2)),T).
external_function(X0,X1,X2,T) :- ast(fact(external_function(X0,X1,X2)),T).
pool(X0,X1,T) :- ast(fact(pool(X0,X1)),T).
theory_terms(X0,X1,X2,T) :- ast(fact(theory_terms(X0,X1,X2)),T).
theory_sequence(X0,X1,X2,T) :- ast(fact(theory_sequence(X0,X1,X2)),T).
theory_function(X0,X1,X2,T) :- ast(fact(theory_function(X0,X1,X2)),T).
theory_operators(X0,X1,X2,T) :- ast(fact(theory_operators(X0,X1,X2)),T).
theory_unparsed_term_elements(X0,X1,X2,X3,T) :- ast(fact(theory_unparsed_term_elements(X0,X1,X2,X3)),T).
theory_unparsed_term(X0,X1,T) :- ast(fact(theory_unparsed_term(X0,X1)),T).
guard(X0,X1,X2,T) :- ast(fact(guard(X0,X1,X2)),T).
guards(X0,X1,X2,T) :- ast(fact(guards(X0,X1,X2)),T).
comparison(X0,X1,X2,T) :- ast(fact(comparison(X0,X1,X2)),T).
boolean_constant(X0,X1,T) :- ast(fact(boolean_constant(X0,X1)),T).
symbolic_atom(X0,X1,T) :- ast(fact(symbolic_atom(X0,X1)),T).
literal(X0,X1,X2,T) :- ast(fact(literal(X0,X1,X2)),T).
literals(X0,X1,X2,T) :- ast(fact(literals(X0,X1,X2)),T).
conditional_literal(X0,X1,X2,T) :- ast(fact(conditional_literal(X0,X1,X2)),T).
aggregate_elements(X0,X1,X2,T) :- ast(fact(aggregate_elements(X0,X1,X2)),T).
aggregate(X0,X1,X2,X3,T) :- ast(fact(aggregate(X0,X1,X2,X3)),T).
theory_atom_elements(X0,X1,X2,X3,T) :- ast(fact(theory_atom_elements(X0,X1,X2,X3)),T).
theory_guard(X0,X1,X2,T) :- ast(fact(theory_guard(X0,X1,X2)),T).
theory_atom(X0,X1,X2,X3,T) :- ast(fact(theory_atom(X0,X1,X2,X3)),T).
body_aggregate_elements(X0,X1,X2,X3,T) :- ast(fact(body_aggregate_elements(X0,X1,X2,X3)),T).
body_aggregate(X0,X1,X2,X3,X4,T) :- ast(fact(body_aggregate(X0,X1,X2,X3,X4)),T).
body_literal(X0,X1,X2,T) :- ast(fact(body_literal(X0,X1,X2)),T).
body_literals(X0,X1,X2,T) :- ast(fact(body_literals(X0,X1,X2)),T).
head_aggregate_elements(X0,X1,X2,X3,T) :- ast(fact(head_aggregate_elements(X0,X1,X2,X3)),T).
head_aggregate(X0,X1,X2,X3,X4,T) :- ast(fact(head_aggregate(X0,X1,X2,X3,X4)),T).
conditional_literals(X0,X1,X2,T) :- ast(fact(conditional_literals(X0,X1,X2)),T).
disjunction(X0,X1,T) :- ast(fact(disjunction(X0,X1)),T).
rule(X0,X1,X2,T) :- ast(fact(rule(X0,X1,X2)),T).
definition(X0,X1,X2,X3,T) :- ast(fact(definition(X0,X1,X2,X3)),T).
show_signature(X0,X1,X2,X3,T) :- ast(fact(show_signature(X0,X1,X2,X3)),T).
defined(X0,X1,X2,X3,T) :- ast(fact(defined(X0,X1,X2,X3)),T).
show_term(X0,X1,X2,T) :- ast(fact(show_term(X0,X1,X2)),T).
minimize(X0,X1,X2,X3,X4,T) :- ast(fact(minimize(X0,X1,X2,X3,X4)),T).
script(X0,X1,X2,T) :- ast(fact(script(X0,X1,X2)),T).
statements(X0,X1,X2,T) :- ast(fact(statements(X0,X1,X2)),T).
constants(X0,X1,X2,T) :- ast(fact(constants(X0,X1,X2)),T).
program(X0,X1,X2,X3,T) :- ast(fact(program(X0,X1,X2,X3)),T).
external(X0,X1,X2,X3,T) :- ast(fact(external(X0,X1,X2,X3)),T).
edge(X0,X1,X2,X3,T) :- ast(fact(edge(X0,X1,X2,X3)),T).
heuristic(X0,X1,X2,X3,X4,X5,T) :- ast(fact(heuristic(X0,X1,X2,X3,X4,X5)),T).
project_atom(X0,X1,X2,T) :- ast(fact(project_atom(X0,X1,X2)),T).
project_signature(X0,X1,X2,X3,T) :- ast(fact(project_signature(X0,X1,X2,X3)),T).
theory_operator_definitions(X0,X1,X2,X3,X4,T) :- ast(fact(theory_operator_definitions(X0,X1,X2,X3,X4)),T).
theory_term_definitions(X0,X1,X2,X3,T) :- ast(fact(theory_term_definitions(X0,X1,X2,X3)),T).
theory_guard_definition(X0,X1,X2,T) :- ast(fact(theory_guard_definition(X0,X1,X2)),T).
theory_atom_definitions(X0,X1,X2,X3,X4,X5,X6,T) :- ast(fact(theory_atom_definitions(X0,X1,X2,X3,X4,X5,X6)),T).
theory_definition(X0,X1,X2,X3,T) :- ast(fact(theory_definition(X0,X1,X2,X3)),T).
comment(X0,X1,X2,T) :- ast(fact(comment(X0,X1,X2)),T).
location(X0,X1,X2,T) :- ast(fact(location(X0,X1,X2)),T).
child(X0,X1,T) :- ast(fact(child(X0,X1)),T).
